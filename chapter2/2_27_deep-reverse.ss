(load "d:\\sicp\\chapter2\\2_18_reverse.ss")
;;
(define x (list (list 1 2) (list 3 4)))
(display x)
(newline)
(display (reverse x))

;;;deep-reverse
(define (deep-reverse y)
  (cond ;((null? y) ());when y is null, y isn't a pair
        ((not (pair? y)) y)
        (else (append (deep-reverse (cdr y)) 
                      (list (deep-reverse (car y)))))))
;(define x (list 1 2 3 4))
(display (deep-reverse x))
(newline)
(define y (list (list (list 1 2) (list 3 4)) 5))
(display (deep-reverse y))
(define z (list (list 1 2) ()))
(newline)
(display (deep-reverse z))
(newline)
(display (deep-reverse (list 1 2 3 4)))
(newline)
(display (deep-reverse (list (list 1 2) (list 3 4) (list 5 6))))
