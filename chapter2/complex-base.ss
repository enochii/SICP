(define (attach-tag type-tag contents)
  (cons type-tag contents))
(define (type-tag datum)
  (if (pair? datum)
      (car datum)
      (error "Bad tagged datum -- TYPE-TAG" datum)))
(define (contents datum)
  (if (piar? datum)
      (cadr datum)
      (error "Bad tagged datum -- CONTENTS")))
;;
(define (rectangular? z)
  (eq? 'rectangular (type-tag z)))
(define (polar? z)
  (eq? 'polar (type-tag z)))
;;Ben
(define (real-part-rectangular z)
  (car z))
(define (imag-part-rectangular z)
  (cdr z))
(load "d:\\sicp\\aux_\\math.ss")
(define (magnitude-rectangular z)
  (sqrt (+ (square )(real-part-rectangular z)
           (square (imag-part-rectangular z)))))
(define (angle-rectangular z)
  (atan (imag-part-rectangular z)
        (real-part-rectangular z)))
(define (make-from-real-imag-retangular x y)
  (attach 'rectangular (cons x y)))
(define (make-from-mag-ang-rectangular r a)
  (attach 'rectangular (cons (* r (sin a))
                             (* r (cos a)))))
;;
(define (real-part-polar z)
  (* (car z) (sin (cdr z))))
(define (imag-part-polar z)
  (* (car z) (cos (cdr z))))
(define (magnitude-polar z)
  (car z))
(define (angle-polar z)
  (cdr z))
(define (make-from-real-imag-polar x y)
  (attach-tag 'polar (cons
                      (sqrt (+ (square x) (square y)))
                      (atan x y))))
(define (make-from-mag-ang-polar r a)
  (attach-tag 'polar (cons r a)))
;;
(define (real-part_ z)
  (cond ((rectangular? z)
         (real-part-rectangular (contents z)))
        ((polar? z)
         (real-part-polar (contents z)))
        (else
         (error "Unknown type -- IMAG-PART" z))))
(define (imag-part_ z)
  (cond ((rectangular? z)
         (imag-part-rectangular (contents z)))
        ((polar? z)
         (imag-part-polar (contents z)))
        (else "Unknown type -- IMAG-PART" z)))
(define (magnitude_ z)
  (cond ((rectangular? z)
         (magnitude-rectangular (contents z)))
        ((polar? z)
         (magnitude-polar (contents z)))
        (else "Unknown type -- MAGNITUDE" z)))
(define (angle_ z)
  (cond ((rectangular? z)
         (angle-rectangular (contents z)))
        ((polar? z)
         (angle-polar (contents z)))
        (else "Unknown type -- ANGLE" z)))
;;
(define (add-complex z1 z2)
  (make-from-real-imag (+ (real-part z1) (real-part z2))
                       (+ (imag-part z1) (imag-part z2))))
(define (make-from-real-imag x y)
  (make-from-real-imag-rectangular x y))
(define (make-from-mag-ang r a)
  (make-from-mag-ang-polar r a))