;;a)
;(load "d:\\sicp\\chapter2\\list-tree-set.ss")
(define (list->tree elements)
  (car (partial-tree elements (length elements))))
;;
(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left (cdr left-result))
                (right-size (- n (+ 1 left-size))))
            (let ((this-entry (car non-left))
                  (right-result (partial-tree (cdr non-left) right-size)))
              (cons (make-tree this-entry left-tree (car right-result))
                    (cdr right-result))
              ))))))
;;test
(define t '(1 2 3 4 5 6))

;(length t)
;(display (list->tree t))
;;b)
;;time complexity -> O(n)