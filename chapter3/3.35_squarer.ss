(load "d:\\sicp\\chapter3\\constraint.ss")
(load "d:\\sicp\\aux_\\math.ss")
(define (squarer a b);;i just calculate a in case of that a is positive
  (define (process-new-value)
    (if (has-value? b)
        (if (< (get-value b) 0)
            (error b "is negative! -- SQUARER")
            (set-value! a (sqrt (get-value b))
                        me))
        (if (has-value? a)
            (set-value! b (square (get-value a))
                        me))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'i-have-a-value)
           (process-new-value))
          ((eq? request 'i-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- SQUARER"))))
  (connect a me)
  (connect b me)
  me)
;;
(define a (make-connector))
(define b (make-connector))

(squarer a b)
(probe 'a a)
(probe 'b b)

;(squarer a b)

(set-value! a 3 'sch)
(forget-value! a 'hcs)
(forget-value! a 'sch)
(set-value! b 81 'xixixi)