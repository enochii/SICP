(load "d:\\sicp\\chapter3\\serializer.ss")
;;a) in terms of mutexs
(define (make-semaphore n)
  (let ((mutex (make-mutex))
        (count 0))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (begin (mutex 'acquire)
                    (if (< count n)
                        (begin (set! count (+ 1 count))
                               (mutex 'release))
                        (begin (mutex 'release)
                               (the-semaphore 'acquire)))))
            ((eq? m 'release)
             (mutex 'acquire)
             (set! count (- count 1))
             (mutex 'release))))
    the-semaphore))
;;b) in terms of atomic test-and-set! opeartions
;;;;;actually it should also include clear! procedure, cause i think it's just 
;;;;;like test-and-set!
(define (make-semaphore n)
  (let ((count (list n)))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! count)
                 (the-semaphore 'acquire)))
            ((eq? m 'release)
             (clear! count))))))
(define (test-and-set! count)
  (if (= 0 (car count))
      #t
      (begin (set-car! count (- (car count) 1))
             #f)))
(define (clear! count)
  (set-car! count (+ 1 (car count))))