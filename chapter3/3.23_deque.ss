(define (make-deque) (cons '() '()))
(define (front-ptr d) (car d))
(define (rear-ptr d) (cdr d))
(define (set-front-ptr! d new-ptr) (set-car! d new-ptr))
(define (set-rear-ptr! d new-ptr) (set-cdr! d new-ptr))
(define (empty-deque? d) (null? (front-ptr d)))
;;
(define (front-deque d) (data (front-ptr d)))
(define (rear-deque d) (data (rear-ptr d)))
(define (prev-ptr item) (car item))
(define (next-ptr item) (caddr item))
(define (set-prev-ptr! item new-ptr) (set-car! item new-ptr))
(define (set-next-ptr! item new-ptr) (set-car! (cddr item) new-ptr))
(define (data item) (cadr item))
(define (print-deque d)
  (define (iter ptr)
    (if (null? ptr)
        (newline)
        (begin (display (data ptr))
               (display " ")
               (iter (next-ptr ptr)))))
  (iter (front-ptr d)))
;
(define (front-insert-deque! d new-data)
  (let ((item (list '() new-data (front-ptr d))))
    (begin (if (empty-deque? d)
               (set-rear-ptr! d item)
               (set-prev-ptr! (front-ptr d) item))
           (set-front-ptr! d item)
           d)))
(define (rear-delete-deque! d)
  (if (empty-deque? d)
      (error "Delete in empty deque rear" d)
      (let ((new-rear-ptr (prev-ptr (rear-ptr d))))
        (if (null? new-rear-ptr)
            (begin (set-front-ptr! d '());;d will become a empty deque
                   (set-rear-ptr! d '())
                   d)
            (begin (set-rear-ptr! d new-rear-ptr)
                   (set-next-ptr! new-rear-ptr '())
                   d)))))
(define (rear-insert-deque! d new-data)
  (let ((item (list (rear-ptr d) new-data '())))
    (begin (if (empty-deque? d)
               (set-front-ptr! d item)
               (set-next-ptr! (rear-ptr d) item))
           (set-rear-ptr! d item)
           d)))
(define (front-delete-deque! d)
  (if (empty-deque? d)
      (error "Delete in empty deque front" d)
      (let ((new-front-ptr (next-ptr (front-ptr d))))
        (if (null? new-front-ptr)
            (begin (set-car! d '())
                   (set-cdr! d '())
                   d)
            (begin (set-front-ptr! d new-front-ptr)
                   (set-prev-ptr! new-front-ptr '())
                   d)))))
;;
(load "d:\\sicp\\chapter3\\deque-test.ss")
(test-code)