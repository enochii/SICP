(load "d:\\sicp\\chapter3\\constraint.ss")
(define (averager x y ave)
  (define (process-new-value)
    (cond ((and (has-value? x) (has-value? y))
           (set-value! ave
                       (/ (+ (get-value x) (get-value y)) 2)
                       me))
          ((and (has-value? x) (has-value? ave))
           (set-value! y
                       (- (* 2 (get-value ave)) (get-value x))
                       me))
          ((and (has-value? y) (has-value? ave))
           (set-value! x
                       (- (* 2 (get-value ave)) (get-value y))
                       me))))
  (define (process-no-value)
    (forget-value! x me)
    (forget-value! y me)
    (forget-value! ave me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'i-have-a-value)
           (process-new-value))
          ((eq? request 'i-lost-my-value)
           (process-no-value))
          (else
           (error "Unknown request -- MULTIPLIER" request))))
  (connect x me)
  (connect y me)
  (connect ave me)
  me)
;;test
(define x (make-connector))
(define y (make-connector))
(define ave (make-connector))
(probe 'x x)
(probe 'y y)
(probe 'ave ave)

(averager x y ave)
(constant 18 x)
(set-value! y 10 'user)
(forget-value! y 'user)
(set-value! ave 50 'xixi)