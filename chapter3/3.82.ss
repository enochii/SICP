(load "d:\\sicp\\chapter3\\estimate-pi.ss")
(load "d:\\sicp\\chapter3\\stream-operation.ss")
(load "d:\\sicp\\chapter3\\recursion-defined-stream.ss")
(load "d:\\sicp\\aux_\\math.ss")
(define (random-in-range l h) (+ (remainder(rand) (- h l)) l))
;(random-in-range 1 10)
(load "d:\\sicp\\aux_\\helper.ss")
(define (integral-stream pred x1 x2 y1 y2)
  (define (experiment)
    (let ((x (random-in-range x1 x2))
          (y (random-in-range y1 y2)))
      ;(output x y)
      (pred x y)))
  (define (generate-trials)
    (cons-stream (experiment)
                 (generate-trials)))
  (define (process trials passed failed)
    (cons-stream
     (/ passed (+ passed failed))
     (cond ((stream-null? trials)
            the-empty-stream)
           ((stream-car trials)
            (process (stream-cdr trials) (+ 1 passed) failed))
           (else
            (process (stream-cdr trials) passed (+ 1 failed))))))
  (scale-stream (let ((trials (generate-trials)))
                  (if (stream-car trials)
                      (process (stream-cdr trials)
                               1 0)
                      (process (stream-cdr trials)
                               0 1)))
                (* 1.0 (- x2 x1) (- y2 y1))))
;;
(define area
  (integral-stream (lambda (x y) (<= (+ (square (- x 5)) (square (- y 7)))
                                     9))
                   2 8 4 10 ))
(load "d:\\sicp\\chapter3\\display-stream.ss")
(/ (stream-ref area 1000) 9);;2.6693306693306695