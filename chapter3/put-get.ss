(load "d:\\sicp\\chapter3\\two-dimenson-table.ss")
(define (make-set same-key?)
  (define (assoc key records)
    (cond ((null? records) #f)
          ((same-key? key (caar records)) (car records))
          (else (assoc key (cdr records)))))
  (let ((local-table (make-table)))
    (define (insert! tag1 tag2 value)
      (put tag1 tag2 value local-table))
    (define (lookup tag1 tag2)
      (get tag1 tag2 local-table))
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            (else (error "no such operation type"))))
    dispatch))
;;
(define operator (make-set equal?))
(define put_
  ;(begin (display "test which put is called")
         (operator 'insert!));)
(define get_ (operator 'lookup))
;;
;((operator 'insert!) 'xi 'xixi 'xixixi)