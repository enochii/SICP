;stack
(define (make-stack)
  (let ((stack '()))
    (define (empty?)
      (null? stack))
    (define (pop)
      (if (null? stack)
          (error "stack is empty! -- POP")
          (begin ;(display (car stack))
                 ;(display "[pop operation] ")
                  (set! stack (cdr stack)))))
    (define (top)
      (if (empty?)
          (error "stack is empty! -- TOP")
          (car stack)))
    (define (push x)
      (set! stack (cons x stack)))
    (define (dispatch message)
      (cond ((eq? message 'pop)
             pop)
            ((eq? message 'push)
             push)
            ((eq? message 'clear)
             clear)
            ((eq? message 'empty?)
             empty?)
            ((eq? message 'top)
             top)
            (else (error "no such operation! -- STACK"))))
    (define (clear)
      (set! stack '()))
    dispatch))
;
(define (pop stack)
  ((stack 'pop)))
(define (push x stack)
  ((stack 'push) x))
(define (clear stack)
  ((stack 'clear)))
(define (_empty? stack)
  ((stack 'empty?)))
(define (top stack)
  ((stack 'top)))
;