关于sicp/exercise 4.76
这道题真的想了小久，大概把自己的思路实现了一下，还没做足够的测试
。先说下想法，这道题是让我们将两个框架流中的框架做一一对比，然后
把所有对比成功的结果合并成一个流，这也是and的答案。那我们先向下
游走到实现两个框架的“合一”，大概的想法是搜索出其中相同变量绑定
的值，比对两个值，有三种情况，0.相同，匹配成功，没有新绑定生成；
1.不同且都是常量，匹配失败；2.不同且至少一个是变量，有新绑定生成。
这里要把所有名称相同的变量都进行对比，得到的所有新绑定和原来的两个
框架再次进行“合并”，这里的“合并”要考虑是不是存在矛盾。还有，对
比和unify-match一样都是递归进行的。
说完了思路，说说怎么解决...
大概想了2种方案
0.每对比一次相同变量，生成一个框架，然后把所有的新框架合并后再把结果
再与两个框架合并，这样做无脑，存在的问题很多。首先由于每一次变量的对
比是分开的，所以两次对比产生的绑定可能存在矛盾，在合并他们的同时也要
再进行一次框架的“合一”，效率可能有点低，得到新框架是否与原框架矛盾
取决于搜索两个变量的值是在两个框架搜索，还是只在自己的框架搜索。
1.如果我们在递归搜索变量的值时，在两个框架同时搜索，同时我们只产生未
在两个框架中有任何绑定值的新绑定，这样新绑定就不会与原来的绑定重复。
这样也可以早点找出矛盾，比如((?x ?y)) ((?x 1) (?y 2))，如果只在自己的
框架搜索，找出矛盾的时间点会延后。再做一点工作，当新绑定产生时把它加入
第一个框架（second也ok，这里是对称的），这样做的优点是后面产生的新绑定
不会与现在的绑定矛盾，矛盾的话直接匹配失败。让我们重新整理思路，如此重
复比对相同变量，把前一次对比相同变量得到的加入了新绑定的两个框架，把它
们作为下一次对比变量的两个框架，递归进行，最终得到两个相容的框架或者
failed标志，这也就是frame-match的工作，但是这里得到的两个相容的框架仍然
可能存在冗余绑定，因为我们对比了相同变量，但是并没有把它们删除，不过剩
下的工作相对简单，只要遍历一个框架的绑定，如若该绑定的变量在另一个框架
中无绑定的话，就将它加入最后的相容框架，遍历完再把另一个框架加入相容框
架即可。
