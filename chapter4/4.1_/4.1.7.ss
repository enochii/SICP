;;4.1.7 separating syntactic analysis from execution
;;proc analyze transfer a exp to a lambda, which has a local environment that has some records,
;;so we can just analyze once.
;;to tell the truth, i'm still a little confused with the mechanismm
(load "d:\\sicp\\chapter4\\4.1_\\e4.6.ss")
(define (eval_ exp env)
  ((analyze exp) env))
;(load "d:\\sicp\\chapter4\\4.1_\\4.1.4.ss")
(define (analyze exp)
  ;(display "analyze ")
  (cond ((self-evaluating? exp)
         (analyze-self-evaluating exp))
        ((quoted? exp)
         (analyze-quoted exp))
        ((variable? exp)
         (analyze-variable exp))
        ((assignment? exp)
         (analyze-assignment exp))
        ((definition? exp)
         (analyze-definition exp))
        ((if? exp)
         (analyze-if exp))
        ((lambda? exp)
         (analyze-lambda exp))
        ((begin? exp)
         (analyze-sequence (begin-actions exp)))
        ((cond? exp)
         (analyze-if (cond->if exp)))
        ((let? exp)
         (analyze-application (let->combination exp)))
        ((application? exp)
         (analyze-application exp))
        (else
         (error "Unknown expression type - ANALYZE" exp))))
;;
(define (analyze-definition exp)
  (let ((var (definition-variable exp))
        (valproc (analyze (definition-value exp))))
    (lambda (env)
      (define-variable! var (valproc env) env))))
;;
(define (analyze-self-evaluating exp)
  (lambda (env) exp))
;;
(define (analyze-quoted exp)
  (let ((qval (text-of-quotation exp)))
    (lambda (env) qval)))
;;
(define (analyze-variable exp)
  (lambda (env) (lookup-variable-value exp env)))
;;
(define (analyze-assignment exp)
  (let ((var (assignment-variable exp))
        (vproc (analyze (assignment-value exp))))
    (lambda (env)
      (set-variable-value! var
                           (vproc env) env)
      'ok)))
;;
(define (analyze-if exp)
  ;(display "analyze-if 4.17")
  (let ((pproc (analyze (if-predicate exp)))
        (cproc (analyze (if-consequent exp)))
        (aproc (analyze (if-alternative exp))))
    (lambda (env)
      (if (true? (pproc env))
          (cproc env)
          (aproc env)))))
;;
(define (analyze-lambda exp)
  (let ((vars (lambda-parameters exp))
        (bproc (analyze-sequence (lambda-body exp))))
    (lambda (env)
      (make-procedure vars bproc env))))
;;
(define (analyze-sequence exps)
  (define (sequentially proc1 proc2)
    (lambda (env) (proc1 env) (proc2 env)))
  (define (loop first-proc rest-procs)
    (if (null? rest-procs)
        first-proc
        (loop (sequentially first-proc (car rest-procs))
              (cdr rest-procs))))
  (let ((procs (map analyze exps)))
    (if (null? procs)
        (error "Empty sequence - ANALYZE"))
    (loop (car procs) (cdr procs))))
(load "d:\\sicp\\chapter4\\4.2_\\e4.22-23.ss")
;;
(define (analyze-application exp)
  (let ((fproc (analyze (operator exp)))
        (aprocs (map analyze (operands exp))))
    (lambda (env)
      (execute-application (fproc env)
                          (map (lambda (aproc) (aproc env)) aprocs)))))
(define (execute-application proc args)
  (cond ((primitive-procedure? proc)
         (apply-primitive-procedure proc args))
        ((compound-procedure? proc)
         ((procedure-body proc)
          (extend-environment (procedure-parameters proc)
                              args
                              (procedure-environment proc))
          ))
        (else
         (error "Unknown procedure type - EXECUTE-APPLICATION"))))
;(eval_ '(define (f n) (if (= n 1) 1 (* n (f (- n 1))))) tgv)
;(eval_ '(define (f n) (= n 1)) tgv)
;(driver-loop)